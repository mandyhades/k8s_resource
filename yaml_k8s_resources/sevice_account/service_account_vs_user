## service account vs user

**user** : human (developer, administrator)
**service account** : machine (prometheus, jenkins)
service account => secret => token
`kubectl create serviceaccount dashboard-sa`
`kubectl get sa`
`kubectl describe sa default `
`image: gcr.io/kodekloud/customimage/my-kubernetes-dashboard`
**2020** , **2021**
2020,2021 => ma thong bao ko het han
**tokenrequestAPI-2022**
chuyen sang su dung token request API vi ly do bao mat . co the su dung cach cu 2020,2021 tuy du an.

```
2020:
kubectl create serviceaccount dashboard-sa
```

2021:

```
kubectl create serviceaccount dashboard-sa
kubectl create token dashboard-sa
```

`kubectl create serviceaccount dashboard-sa`
`kubectl get serviceaccount `
`kubectl describe serviceaccount dashboard-sa` => token
`kubectl describe serviceaccount dashboard-sa-token-kbbdm` => check token (api key)

- token co dinh dang : abccsdsdsd
  `curl localhost:6443/api -insecure --header "Authorization abccsdsdsd"`

`kubectl get serviceaccount`
`kubectl describe pod my-kubernets-dashboard`
=> mounts : /var/run/secrets/kubernetes.io/serviceaccount ...
`kubectl exec -it my-kubernets-dashboard --ls /var/run/secrets/kubernetes.io/serviceaccount`
=> ca.crt , namespace , token
`kubectl exec -it my-kubernetes-dashboard cat /var/run/secrets/kubernetes.io/serviceaccount/token`

## token decoded:

`jwt.io`

`jq -R 'spilit(".") | select(length > 0) | .[0],.[1] | @base64d | fromjson' <<< eyhsdhshd... `

## token request API:

- Audience Bound
- Time Bound
- Object Bound

## service account solution

### **step 1**

At what location is the ServiceAccount credentials available within the pod?
**solution**
Run the command kubectl describe pod and look for volume mount path.

```
 Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-99kfc (ro)
```

### **step 2**

The application needs a ServiceAccount with the Right permissions to be created to authenticate to Kubernetes. The default ServiceAccount has limited access. Create a new ServiceAccount named dashboard-sa.
`kubectl create serviceaccount dashboard-sa`

### **step 3**

Enter the access token in the UI of the dashboard application. Click Load Dashboard button to load Dashboard
Create an authorization token for the newly created service account, copy the generated token and paste it into the token field of the UI.
To do this, run kubectl create token dashboard-sa for the dashboard-sa service account, copy the token and paste it in the UI.

### **step 4**

You shouldn't have to copy and paste the token each time. The Dashboard application is programmed to read token from the secret mount location. However currently, the default service account is mounted. Update the deployment to use the newly created ServiceAccount
Edit the deployment to change ServiceAccount from default to dashboard-sa.
**solution1**
Make use of the kubectl set command. Run the following command to use the newly created service account: - kubectl set serviceaccount deploy/web-dashboard dashboard-sa
**solution2**
Use the kubectl edit command for the deployment and specify the serviceAccountName field inside the pod spec.
Use following YAML file:

```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-dashboard
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      name: web-dashboard
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: web-dashboard
    spec:
      serviceAccountName: dashboard-sa
      containers:
      - image: gcr.io/kodekloud/customimage/my-kubernetes-dashboard
        imagePullPolicy: Always
        name: web-dashboard
        ports:
        - containerPort: 8080
          protocol: TCP
```
